#!/bin/bash -e

RED='\033[0;31m'
NOC='\033[0m'
LGR='\033[1;32m'

DockerFilesDir=$(dirname $0)/dockerfiles
RoleDir=/etc/ansible/roles
Role=${RoleDir}/role_under_test
Tag=validator

function _echo() {
  echo -e "${LGR}$(date +%d%m%Y-%H:%M:%S) * $1 ${NOC}"
}

function build(){
  typeset distribution=$1
  typeset version=$2

  docker pull ${distribution}:${version}
  docker build --file=${DockerFilesDir}/${distribution}-${version} --tag=${distribution}-${version}:${Tag} ${DockerFilesDir}
}

function clean(){
  typeset id=$1

  docker stop ${id} 2>/dev/null
  docker rm   ${id} 2>/dev/null
}

function run() {
  typeset image=$1
  typeset test=$2
  typeset run_opts=""
  typeset init=/sbin/init
  
  _echo "*** ${image} - ${test} in progress..."

  container_id=$(mktemp)
  _echo "container_id=${container_id}"

  _echo "${image} - Initialisation and requirements."
  docker run --detach --volume="${PWD}":${Role}:ro ${run_opts} --name="${image}_${Tag}" ${image}:${Tag} "${init}" > "${container_id}"
  docker exec "$(cat ${container_id})" python ${Role}/requirements.py ${Role}

  _echo "${image} - Ansible syntax check."
  docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook ${Role}/tests/${test} --syntax-check

  _echo "${image} - Test role."
  docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook ${Role}/tests/${test} --verbose

  _echo "${image} - Test role idempotence."
  idempotence=$(mktemp)
  docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook {Role}/tests/${test} --verbose | tee -a ${idempotence}

  tail ${idempotence} \
  | grep -q 'changed=0.*failed=0' \
  && (echo 'Idempotence test: pass' && exit 0) \
  || (echo 'Idempotence test: fail' && exit 1)

  _echo "*** ${image} - ${test} done."
  _echo "container_id=${container_id}: $(cat ${container_id})"
  docker stop $(cat ${container_id}) && docker rm $(cat ${container_id})
}


ls -1 ${DockerFilesDir} | awk -F"-" '{print $1 " " $2}' | \
while read distribution version
do
  clean ${distribution}-${version}_${Tag}
  _echo "build ${distribution} ${version} in progress..."
  build ${distribution} ${version}
  for test in $(ls -1 tests/)
  do
    run ${distribution}-${version} ${test}
  done
done
